<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');date_default_timezone_set('America/Mexico_City');//Clase control de los productosclass productos extends CI_Controller {//Constructor de la clase	function __construct(){		parent::__construct();		$this->load->model('seguridad_model');//llamado al modelo seguridad		$this->load->model('productos_model');//Llamado al modelo productos		$this->load->helper('date');//Llamado al helper date para fechas	}//Funcion index Muestra y carga la vista del modulo productos	public function index(){          //Utilizacion del helper url          $url="http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];         //Llamada a la funcion SessionActivo del modelo seguridad  para verificar la sesion          $this->seguridad_model->SessionActivo($url);          $this->load->view('constant');//llamada a la vista constantes          $this->load->view('view_header');//Llamada ala vista header          //Llamado a la funcion listarProductos del modelo productos y los almacena en un array          $data['productos'] = $this->productos_model->ListarProductos();          //Carga de la vista productos con parametro del arreglo de los productos          $this->load->view('productos/view_productos', $data);          //Lamada a la vista footer          $this->load->view('view_footer');	}//Funcion deleteProducto para eliminar un producto	public function deleteproducto(){            //Utilizacion del helper url	    $url="http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];            //Llamada a la funcion SessionActivo del modelo seguridad  para verificar la sesion             $this->seguridad_model->SessionActivo($url);            $Productos 		= json_decode($this->input->post('MiProducto'));            //Parametros a enviar 	    $id             = base64_decode($Productos->Id);	    $codigo 		= base64_decode($Productos->Codigo);		/*Array de response para msj de error*/		$response = array (		     "estatus"   => false,	            "error_msg" => ""	        );                //Llamado a funcion eliminar producto del modelo productos		$this->productos_model->EliminarProducto($id);                //Mensaje de confirmacion de eliminacion		$response["error_msg"]   = "<div class='alert alert-success text-center' alert-dismissable> <button type='button' class='close' data-dismiss='alert'>&times;</button>Producto Eliminado Correctamente Clave: <strong>".$codigo."</strong>, La Informaci√≥n de Actualizara en 5 Segundos <meta http-equiv='refresh' content='5'></div>";		echo json_encode($response);	}//Funcion view_img para cargar imagen del producto	public function view_img($id){            //Parametros enviados		$id 			   = base64_decode($id); 		$data["id"]        = $id;		$this->load->view('constant');//llamada a la vista constantes		$this->load->view('view_header');//llamada a la vista header		$this->load->view('productos/view_img',$data);//llamada a la vista view_img		$this->load->view('view_footer');//llamada a la vista footer	}//Funcion SubeImg para subir imagenes de los productos        	public function SubeImg(){            //Reglas para nombre de imagen		$img1= "";		$str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";        for($i=0;$i<5;$i++) {            $img1 .= substr($str,rand(0,62),1);        }        //Ruta para almacenamiento de imagenes		$idimg     = $this->input->post('id');		$nombreimg = $idimg."_".$img1;		$config['upload_path'] = realpath(APPPATH."../images/products");        $config['allowed_types'] = 'gif|jpg|png';        $config['max_size'] = '1048576';        $config['max_width'] = '900';        $config['max_height'] = '900';		$config['file_name']= $idimg."_".$img1;		$this->load->library('upload', $config);		if (!$this->upload->do_upload('file')) {//If para error de cargado de img			echo  $this->upload->display_errors();		}else{//Confirmacion de imagen subida			$file_info = $this->upload->data();			$data      = array('upload_data'=>$this->upload->data());			echo "Imagen Subido Correctamente.";			$img = array("ID_PRODUCTO"=>$idimg,"IMG"=>$nombreimg.$file_info["file_ext"]);			$this->productos_model->GuardaImg($img);		}	}//Funcion EditarProducto para actualizar la informacion del producto        	public function editarProducto($id = NULL){                //Utilizacion del helper url		$url="http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];                //Llamada a la funcion SessionActivo del modelo seguridad  para verificar la sesion                         $this->seguridad_model->SessionActivo($url);                //Parametros		$id 			   = base64_decode($id);                 //Llamado a funcion buscarProducto del modelo productos 		$data["productos"] = $this->productos_model->BuscarProducto($id);                //Titulo de la vista		$data["titulo"]    = "Editar Producto";                //llamada a la vista constantes		$this->load->view('constant');                //llamada a la vista header		$this->load->view('view_header');                //llamada a la vista nuevo producto		$this->load->view('productos/view_nuevo_producto',$data);                //llamada a la vista footer		$this->load->view('view_footer');	}//Funcion Nuevo para crear un nuevo producto	public function nuevo(){            //Utilizacion del helper url	    $url="http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];            //Llamada a la funcion SessionActivo del modelo seguridad  para verificar la sesion                     $this->seguridad_model->SessionActivo($url);            //llamada a la vista constantes            $this->load->view('constant');            //llamada a la vista header	    $this->load->view('view_header');            //Titulo de la vista	    $data["titulo"]    = "Nuevo Producto";            //llamada a la vista nuevo producto            $this->load->view('productos/view_nuevo_producto',$data);            //llamada a la vista footer	    $this->load->view('view_footer');	}//Funcion categorias para listar categorias	public function categorias(){                //Llamado a funcion categorias del modelo productos		$categorias = $this->productos_model->Categorias();		echo json_encode($categorias);	}//Funcion de las subcategorias para listar las subcategorias 	public function subcategorias(){            //Variable de categoria para el filtro de busqueda	    $idCategoria   = $this->input->get("filtro");            //Llamado a funcion de subcategorias de modelo productos 	    $subcategorias = $this->productos_model->Subcategorias($idCategoria);	    echo json_encode($subcategorias);	}//Funcion Proveedores 	public function proveedores(){                //Llamado a funcion a proveedores del modelo productos		$proveedores = $this->productos_model->Proveedores();		echo json_encode($proveedores);	}//Funcion Guarda Productos para almacenar los datos del productos 	public function GuardaProductos(){        //Utilizacion del helper url	    $url="http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];        //Llamada a la funcion SessionActivo del modelo seguridad  para verificar la sesion            $this->seguridad_model->SessionActivo($url);      	    $Productos 		= json_decode($this->input->post('Productos'));	    /*Array de response Para errores de guardado*/	    $response = array (		"estatus"   => false,		"campo"     => "",	        "error_msg" => ""	    );                //If para verificacion del campo Codigo		if($Productos->Codigo==""){			$response["campo"]     = "codigo";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable> <button type='button' class='close' data-dismiss='alert'>&times;</button>El Codigo de Barras es Obligatorio</div>";			echo json_encode($response);		}else if($Productos->Descripcion==""){//If para verificacion del campo Descripcion			$response["campo"]     = "descripcion";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>El Descripcion del Producto es obligatorio</div>";			echo json_encode($response);		}else if($Productos->Pcompra==""){//If para verificacion del campo Precio Compra			$response["campo"]       = "pcompra";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>El Precio Compra es Obligatorio</div>";			echo json_encode($response);		}else if($Productos->Pventa==""){//If para verificacion del campo Precio Venta				$response["campo"]       = "pventa";				$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>El Precio Venta es obligatorio</div>";				echo json_encode($response);		}else if($Productos->unidadmedida=="0"){//If para verificacion del campo Unidad Medida				$response["campo"]       = "unidadmedida";				$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>La Unidad de Medida es Obligatorio</div>";				echo json_encode($response);		}else if($Productos->Categoria=="0"){//If para verificacion del campo Categoria			$response["campo"]       = "categoria";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>Elige una Categoria</div>";			echo json_encode($response);		}else if($Productos->SubCategoria=="0"){//If para verificacion del campo Subcategoria			$response["campo"]       = "subcategoria";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>Elige una Sub-Categoria</div>";			echo json_encode($response);		}else if($Productos->Inventario=="0"){//If para verificacion del campo Inventario			$response["campo"]       = "inventario";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>Elige una Si es Inventariable el Producto</div>";			echo json_encode($response);		}else if($Productos->Inventario=="1" and ($Productos->Stock=="" or $Productos->Stock=="0")){//If para verificacion del campo Stock			$response["campo"]       = "stock";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>El Stock Es Obligatorio</div>";			echo json_encode($response);		}else if($Productos->Proveedor=="0"){//If para verificacion del campo Proveedor			$response["campo"]       = "proveedor";			$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable><button type='button' class='close' data-dismiss='alert'>&times;</button>El Proveedor Es Obligatorio</div>";			echo json_encode($response);		}else{				/*Verificamos si Existe el codigo de barras*/				if($Productos->Id==""){					$ExisteProducto         = $this->productos_model->ExisteCodigo($Productos->Codigo);					if($ExisteProducto==true){						$response["campo"]     = "codigo";						$response["error_msg"]   = "<div class='alert alert-danger text-center' alert-dismissable> <button type='button' class='close' data-dismiss='alert'>&times;</button>El Codigo de Barras Ya esta en Uso</div>";						echo json_encode($response);					}else{                                            //ArrayRegistraProducto con datos recuperados de los campos						$RegistrProducto 		= array(						'codigo'     		=> $Productos->Codigo,						'descripcion'		=> $Productos->Descripcion,						'precio_compra'		=> $Productos->Pcompra,						'precio_venta'		=> $Productos->Pventa,						'id_categoria'		=> $Productos->Categoria,						'id_subcategoria'	=> $Productos->SubCategoria,						'inventariable'		=> $Productos->Inventario,						'stock'				=> $Productos->Stock,						'id_proveedor'		=> $Productos->Proveedor,						'unidadmedida'	    => $Productos->unidadmedida,						'fecha'				=> date('Y-m-j H:i:s')						);                                               //Llamadp a funcion saveproductos del modelo productos						$this->productos_model->SaveProductos($RegistrProducto);						$response["error_msg"]   = "<div class='alert alert-success text-center' alert-dismissable> <button type='button' class='close' data-dismiss='alert'>&times;</button>Informacion Guardada Correctamente</div>";						echo json_encode($response);					}				}else{                                    //ArrayUpdateProductos con datos recuperados de los campos					$UpdateProductos 		= array(						'codigo'     		=> $Productos->Codigo,						'descripcion'		=> $Productos->Descripcion,						'precio_compra'		=> $Productos->Pcompra,						'precio_venta'		=> $Productos->Pventa,						'id_categoria'		=> $Productos->Categoria,						'id_subcategoria'	=> $Productos->SubCategoria,						'inventariable'		=> $Productos->Inventario,						'stock'				=> $Productos->Stock,						'id_proveedor'		=> $Productos->Proveedor,						'unidadmedida'	    => $Productos->unidadmedida,						'FechaEdicion'		=> date('Y-m-j H:i:s')						);                                        //Llamado a funcion updateproductos del modelo productos					$this->productos_model->UpdateProductos($UpdateProductos,$Productos->Id);					$response["error_msg"]   = "<div class='alert alert-success text-center' alert-dismissable> <button type='button' class='close' data-dismiss='alert'>&times;</button>Informacion Actualizada Correctamente</div>";					echo json_encode($response);				}		}	}}